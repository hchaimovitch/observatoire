{"ast":null,"code":"var _jsxFileName = \"C:\\\\work\\\\Project\\\\reactJs\\\\observatoire\\\\src\\\\components\\\\type\\\\chart.jsx\";\n//import './style.css';\nimport React from 'react';\nimport * as d3 from 'd3';\n\nfunction chart() {\n  /*\r\n  const url = \"./flare.json\";\r\n  d3.json(url, function (data) {\r\n      console.log(data);\r\n  });\r\n  console.log(d3.json(\"./flare.json\"));\r\n  */\n\n  /*\r\n  var promises = [];\r\n      promises.push(d3.json(\"./world-countries-no-antartica.json\"));\r\n  */\n  var data = d3.json(\"./flare.json\");\n  /*\r\n  Promise.all(promises).then(function(values) {\r\n      data = values[0];\r\n  });\r\n  */\n\n  console.log(\"data : \" + data);\n  /*\r\n      const partition = data => d3.partition()\r\n          .size([2 * Math.PI, radius])\r\n      (d3.hierarchy(data)\r\n          .sum(d => d.size)\r\n          .sort((a, b) => b.value - a.value));\r\n      const color = d3.scaleOrdinal().range(d3.quantize(d3.interpolateRainbow, data.children.length + 1));\r\n      const format = d3.format(\",d\");\r\n      const width = 932;\r\n      const radius = width / 2;\r\n      const arc = d3.arc()\r\n          .startAngle(d => d.x0)\r\n          .endAngle(d => d.x1)\r\n          .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))\r\n          .padRadius(radius / 2)\r\n          .innerRadius(d => d.y0)\r\n          .outerRadius(d => d.y1 - 1);\r\n          \r\n      const root = this.partition(this.data);      \r\n      const svg = d3.select(\"#type\")\r\n          .style(\"width\", \"100%\")\r\n          .style(\"height\", \"auto\")\r\n          .style(\"padding\", \"10px\")\r\n          .style(\"font\", \"10px sans-serif\")\r\n          .style(\"box-sizing\", \"border-box\");\r\n        \r\n      const g = svg.append(\"g\");\r\n      \r\n      g.append(\"g\")\r\n          .attr(\"fill-opacity\", 0.6)\r\n        .selectAll(\"path\")\r\n        .data(root.descendants().filter(d => d.depth))\r\n        .enter().append(\"path\")\r\n          .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return this.color(d.data.name); })\r\n          .attr(\"d\", this.arc)\r\n        .append(\"title\")\r\n          .text(d => `${d.ancestors().map(d => d.data.name).reverse().join(\"/\")}\\n${this.format(d.value)}`);\r\n    \r\n      g.append(\"g\")\r\n          .attr(\"pointer-events\", \"none\")\r\n          .attr(\"text-anchor\", \"middle\")\r\n        .selectAll(\"text\")\r\n        .data(root.descendants().filter(d => d.depth && (d.y0 + d.y1) / 2 * (d.x1 - d.x0) > 10))\r\n        .enter().append(\"text\")\r\n          .attr(\"transform\", function(d) {\r\n            const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;\r\n            const y = (d.y0 + d.y1) / 2;\r\n            return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;\r\n          })\r\n          .attr(\"dy\", \"0.35em\")\r\n          .text(d => d.data.name);\r\n    \r\n      document.body.appendChild(svg.node());\r\n    \r\n      const box = g.node().getBBox();\r\n    \r\n      svg.remove()\r\n          .attr(\"width\", box.width)\r\n          .attr(\"height\", box.height)\r\n          .attr(\"viewBox\", `${box.x} ${box.y} ${box.width} ${box.height}`);\r\n  */\n  // return svg.node();\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  });\n}\n\n;\nexport default (function (props) {\n  // console.log('props' + JSON.stringify(props));\n  return chart();\n});","map":{"version":3,"sources":["C:\\work\\Project\\reactJs\\observatoire\\src\\components\\type\\chart.jsx"],"names":["React","d3","chart","data","json","console","log","props"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;;AAEA,SAASC,KAAT,GAAkB;AACd;;;;;;;;AAQA;;;;AAIA,MAAMC,IAAI,GAAGF,EAAE,CAACG,IAAH,CAAQ,cAAR,CAAb;AACA;;;;;;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAYH,IAAxB;AAEJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DI;;AACA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD;;AAAA;AAED,gBAAe,UAACI,KAAD,EAAW;AACxB;AACC,SAAOL,KAAK,EAAZ;AACH,CAHA","sourcesContent":["//import './style.css';\r\nimport React from 'react';\r\nimport * as d3 from 'd3';\r\n\r\nfunction chart () {\r\n    /*\r\n    const url = \"./flare.json\";\r\n    d3.json(url, function (data) {\r\n        console.log(data);\r\n    });\r\n    console.log(d3.json(\"./flare.json\"));\r\n    */\r\n\r\n    /*\r\n    var promises = [];\r\n        promises.push(d3.json(\"./world-countries-no-antartica.json\"));\r\n    */\r\n    const data = d3.json(\"./flare.json\");\r\n    /*\r\n    Promise.all(promises).then(function(values) {\r\n        data = values[0];\r\n    });\r\n    */\r\n    console.log(\"data : \" + data);\r\n\r\n/*\r\n    const partition = data => d3.partition()\r\n        .size([2 * Math.PI, radius])\r\n    (d3.hierarchy(data)\r\n        .sum(d => d.size)\r\n        .sort((a, b) => b.value - a.value));\r\n    const color = d3.scaleOrdinal().range(d3.quantize(d3.interpolateRainbow, data.children.length + 1));\r\n    const format = d3.format(\",d\");\r\n    const width = 932;\r\n    const radius = width / 2;\r\n    const arc = d3.arc()\r\n        .startAngle(d => d.x0)\r\n        .endAngle(d => d.x1)\r\n        .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))\r\n        .padRadius(radius / 2)\r\n        .innerRadius(d => d.y0)\r\n        .outerRadius(d => d.y1 - 1);\r\n        \r\n    const root = this.partition(this.data);      \r\n    const svg = d3.select(\"#type\")\r\n        .style(\"width\", \"100%\")\r\n        .style(\"height\", \"auto\")\r\n        .style(\"padding\", \"10px\")\r\n        .style(\"font\", \"10px sans-serif\")\r\n        .style(\"box-sizing\", \"border-box\");\r\n      \r\n    const g = svg.append(\"g\");\r\n    \r\n    g.append(\"g\")\r\n        .attr(\"fill-opacity\", 0.6)\r\n      .selectAll(\"path\")\r\n      .data(root.descendants().filter(d => d.depth))\r\n      .enter().append(\"path\")\r\n        .attr(\"fill\", d => { while (d.depth > 1) d = d.parent; return this.color(d.data.name); })\r\n        .attr(\"d\", this.arc)\r\n      .append(\"title\")\r\n        .text(d => `${d.ancestors().map(d => d.data.name).reverse().join(\"/\")}\\n${this.format(d.value)}`);\r\n  \r\n    g.append(\"g\")\r\n        .attr(\"pointer-events\", \"none\")\r\n        .attr(\"text-anchor\", \"middle\")\r\n      .selectAll(\"text\")\r\n      .data(root.descendants().filter(d => d.depth && (d.y0 + d.y1) / 2 * (d.x1 - d.x0) > 10))\r\n      .enter().append(\"text\")\r\n        .attr(\"transform\", function(d) {\r\n          const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;\r\n          const y = (d.y0 + d.y1) / 2;\r\n          return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;\r\n        })\r\n        .attr(\"dy\", \"0.35em\")\r\n        .text(d => d.data.name);\r\n  \r\n    document.body.appendChild(svg.node());\r\n  \r\n    const box = g.node().getBBox();\r\n  \r\n    svg.remove()\r\n        .attr(\"width\", box.width)\r\n        .attr(\"height\", box.height)\r\n        .attr(\"viewBox\", `${box.x} ${box.y} ${box.width} ${box.height}`);\r\n*/  \r\n    // return svg.node();\r\n    return <div></div>;\r\n  };\r\n\r\n  export default (props) => {\r\n    // console.log('props' + JSON.stringify(props));\r\n     return chart()\r\n }"]},"metadata":{},"sourceType":"module"}